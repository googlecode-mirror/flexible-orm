<?php
/**
 * @file
 * @author jarrod.swift
 */
namespace ORM\Utilities;
use ORM\Tests\ORMTest;

require_once dirname(__FILE__) . '/../ORMTest.php';

/**
 * Test class for ErrorHandler.
 * Generated by PHPUnit on 2011-11-15 at 20:55:31.
 */
class ErrorHandlerTest extends ORMTest {

    /**
     * @var ErrorHandler $errorHandler
     */
    protected $errorHandler;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->errorHandler = new ErrorHandler();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        restore_error_handler();
    }

    /**
     * @expectedException \ORM\Exceptions\PHPWarningException
     */
    public function testRegisterErrorHandler() {
        $this->errorHandler->registerErrorHandler();
        trigger_error('Gah, I had an error!', E_USER_WARNING);
    }
    
    public function testRegisterDoesntRaiseTwoExceptions() {
        $this->errorHandler->register();
        
        try{
            trigger_error('Gah, I had an error!', E_USER_WARNING);
        } catch( \ORM\Exceptions\PHPWarningException $e) {
            $this->assertTrue( true );
        }
    }

    /**
     * @expectedException \ORM\Exceptions\PHPErrorException
     */
    public function testRegisterShutdownHandlerCompileError() {
        $this->errorHandler->registerShutdownHandler();
        
        $this = 'something';
    }

    /**
     * @expectedException \ORM\Exceptions\PHPNoticeException
     */
    public function testHandleErrorNotice() {
        $this->errorHandler->handleError(E_NOTICE, "Test error", __FILE__, __LINE__ );
    }
    
    /**
     * @expectedException \ORM\Exceptions\PHPWarningException
     */
    public function testHandleErrorWarning() {
        $this->errorHandler->handleError(E_WARNING, "Test error", __FILE__, __LINE__ );
    }

    public function testDisplayErrorOfType() {
        error_reporting(E_ALL ^ E_NOTICE);
        
        $this->assertTrue( $this->errorHandler->displayErrorOfType(E_ERROR), "Failed to display E_ERROR");
        $this->assertTrue( $this->errorHandler->displayErrorOfType(E_USER_WARNING), "Failed to display E_USER_WARNING");
        $this->assertFalse( $this->errorHandler->displayErrorOfType(E_NOTICE), "Incorrectly displayed E_NOTICE");
        
        error_reporting(E_ALL);
        $this->assertTrue( $this->errorHandler->displayErrorOfType(E_NOTICE), "Failed to display E_NOTICE");
    }
    
    public function testExceptionQuality() {
        error_reporting(E_ALL);
        try {
            $this->errorHandler->handleError(E_NOTICE, "Test error", __FILE__, $line = __LINE__ );
            $this->assertTrue( false );
        } catch(\ORM\Exceptions\PHPNoticeException $e ) {
            $this->assertEquals( $line, $e->getLine() );
            $this->assertEquals( __FILE__, $e->getFile() );
        }
    }
    
}
