<?php
namespace FlexibleORMTests;

use Suho\FlexibleOrm\ObjectCollection;

require_once 'ORMTest.php';

/**
 * Test class for ObjectCollection.
 * Generated by PHPUnit on 2011-03-03 at 13:36:09.
 */
class ObjectCollectionTest extends ORMTest {

    /**
     * @var ObjectCollection $object
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new ObjectCollection(array(
            new Mock\Staff(array('name' => 'Jarrod',    'age' => 31)),
            new Mock\Staff(array('name' => 'Steve',     'age' => 34)),
            new Mock\Staff(array('name' => 'Seb',       'age' => 29)),
            new Mock\Staff(array('name' => 'Steve',     'age' => 18)),
        ));
    }

    /**
     * Test the elements related to the Iterator interface
     */
    public function testIteratorInterface() {
        $count = 0;
        foreach ( $this->object as $staff ) {
            $this->assertTrue( $staff instanceof Mock\Staff );
            $count++;
        }

        $this->assertEquals( 4, $count );

        // Ensure rewind works by doing it again
        foreach ( $this->object as $staff ) {
            $this->assertTrue( $staff instanceof Mock\Staff );
            $count++;
        }

        $this->assertEquals( 8, $count );
    }

    /**
     * Test the elements related to the ArrayAccess interface
     */
    public function testArrayAccess() {
        $this->assertEquals( 'Seb', $this->object[2]->name );
        $this->object[] = new Mock\Staff(array('name' => 'Alistair', 'age' => 20) );

        $this->assertTrue( isset($this->object[4]) );
        $this->assertEquals( 'Alistair', $this->object[4]->name );

        unset($this->object[4]);
        $this->assertFalse( isset($this->object[4]) );
    }

    /**
     * Test the elements related to the Countable interface
     */
    public function testCountable() {
        $this->assertEquals( 4, count($this->object) );
    }

    public function testReverse() {
        $firstObject = $this->object[0];
        $this->object->reverse();

        $this->assertEquals( $firstObject, $this->object[3] );
    }

    public function testEach() {
        $this->object->each(function($staff){
           $staff->name = 'Frank';
        });

        foreach ( $this->object as $staff ) {
            $this->assertEquals('Frank', $staff->name);
        }

        $this->assertEquals( 4, count($this->object) );
    }

    public function testMapProperty() {
        $names = $this->object->map('name');

        $this->assertEquals(
            array('Jarrod', 'Steve', 'Seb', 'Steve'),
            $names
        );
    }

    public function testMapFunction() {
        $names = $this->object->map(function($staff){
            return "$staff->name.$staff->age";
        });

        $this->assertEquals(
            array('Jarrod.31', 'Steve.34', 'Seb.29', 'Steve.18'),
            $names
        );
    }

    public function testPop() {
        $lastUser = $this->object->pop();

        $this->assertEquals( 18, $lastUser->age );
        $this->assertEquals( 3, count($this->object) );
    }

    public function testSelectProperty() {
        $steves = $this->object->select( 'name', 'Steve' );

        $this->assertEquals( 2, count($steves) );
        $this->assertEquals( 'Steve', $steves[0]->name );
        $this->assertEquals( 'Steve', $steves[1]->name );
        $this->assertNotEquals( $steves[0]->age, $steves[1]->age );
    }

    public function testSelectFunction() {
        $oldOrSteve = $this->object->select(function($staff){
            return $staff->name == 'Steve' || $staff->age > 30;
        });

        $this->assertEquals( 3, count($oldOrSteve) );
    }

    public function testDetect() {
        // Check there is a staff member named Jarrod (very important)
        $this->assertTrue($this->object->detect(function($staff){
            return $staff->name == 'Jarrod';
        }));

        // Check there are no staff over 70
        $this->assertFalse($this->object->detect(function($staff){
            return $staff->age > 70;
        }));
    }
}

?>
